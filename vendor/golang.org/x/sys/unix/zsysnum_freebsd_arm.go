// mksysnum_freebsd.pl
// Code generated by the command above; see README.md. DO NOT EDIT.

// +build arm,freebsd

package unix

const (
	// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int
	SYS_EXIT                   = 1   // { void sys_exit(int rval); } exit \
	SYS_FORK                   = 2   // { int fork(void); }
	SYS_READ                   = 3   // { ssize_t read(int fd, void *buf, \
	SYS_WRITE                  = 4   // { ssize_t write(int fd, const void *buf, \
	SYS_OPEN                   = 5   // { int open(char *path, int flags, int mode); }
	SYS_CLOSE                  = 6   // { int close(int fd); }
	SYS_WAIT4                  = 7   // { int wait4(int pid, int *status, \
	SYS_LINK                   = 9   // { int link(char *path, char *link); }
	SYS_UNLINK                 = 10  // { int unlink(char *path); }
	SYS_CHDIR                  = 12  // { int chdir(char *path); }
	SYS_FCHDIR                 = 13  // { int fchdir(int fd); }
	SYS_MKNOD                  = 14  // { int mknod(char *path, int mode, int dev); }
	SYS_CHMOD                  = 15  // { int chmod(char *path, int mode); }
	SYS_CHOWN                  = 16  // { int chown(char *path, int uid, int gid); }
	SYS_OBREAK                 = 17  // { int obreak(char *nsize); } break \
	SYS_GETPID                 = 20  // { pid_t getpid(void); }
	SYS_MOUNT                  = 21  // { int mount(char *type, char *path, \
	SYS_UNMOUNT                = 22  // { int unmount(char *path, int flags); }
	SYS_SETUID                 = 23  // { int setuid(uid_t uid); }
	SYS_GETUID                 = 24  // { uid_t getuid(void); }
	SYS_GETEUID                = 25  // { uid_t geteuid(void); }
	SYS_PTRACE                 = 26  // { int ptrace(int req, pid_t pid, \
	SYS_RECVMSG                = 27  // { int recvmsg(int s, struct msghdr *msg, \
	SYS_SENDMSG                = 28  // { int sendmsg(int s, struct msghdr *msg, \
	SYS_RECVFROM               = 29  // { int recvfrom(int s, caddr_t buf, \
	SYS_ACCEPT                 = 30  // { int accept(int s, \
	SYS_GETPEERNAME            = 31  // { int getpeername(int fdes, \
	SYS_GETSOCKNAME            = 32  // { int getsockname(int fdes, \
	SYS_ACCESS                 = 33  // { int access(char *path, int amode); }
	SYS_CHFLAGS                = 34  // { int chflags(const char *path, u_long flags); }
	SYS_FCHFLAGS               = 35  // { int fchflags(int fd, u_long flags); }
	SYS_SYNC                   = 36  // { int sync(void); }
	SYS_KILL                   = 37  // { int kill(int pid, int signum); }
	SYS_GETPPID                = 39  // { pid_t getppid(void); }
	SYS_DUP                    = 41  // { int dup(u_int fd); }
	SYS_PIPE                   = 42  // { int pipe(void); }
	SYS_GETEGID                = 43  // { gid_t getegid(void); }
	SYS_PROFIL                 = 44  // { int profil(caddr_t samples, size_t size, \
	SYS_KTRACE                 = 45  // { int ktrace(const char *fname, int ops, \
	SYS_GETGID                 = 47  // { gid_t getgid(void); }
	SYS_GETLOGIN               = 49  // { int getlogin(char *namebuf, u_int \
	SYS_SETLOGIN               = 50  // { int setlogin(char *namebuf); }
	SYS_ACCT                   = 51  // { int acct(char *path); }
	SYS_SIGALTSTACK            = 53  // { int sigaltstack(stack_t *ss, \
	SYS_IOCTL                  = 54  // { int ioctl(int fd, u_long com, \
	SYS_REBOOT                 = 55  // { int reboot(int opt); }
	SYS_REVOKE                 = 56  // { int revoke(char *path); }
	SYS_SYMLINK                = 57  // { int symlink(char *path, char *link); }
	SYS_READLINK               = 58  // { ssize_t readlink(char *path, char *buf, \
	SYS_EXECVE                 = 59  // { int execve(char *fname, char **argv, \
	SYS_UMASK                  = 60  // { int umask(int newmask); } umask umask_args \
	SYS_CHROOT                 = 61  // { int chroot(char *path); }
	SYS_MSYNC                  = 65  // { int msync(void *addr, size_t len, \
	SYS_VFORK                  = 66  // { int vfork(void); }
	SYS_SBRK                   = 69  // { int sbrk(int incr); }
	SYS_SSTK                   = 70  // { int sstk(int incr); }
	SYS_OVADVISE               = 72  // { int ovadvise(int anom); } vadvise \
	SYS_MUNMAP                 = 73  // { int munmap(void *addr, size_t len); }
	SYS_MPROTECT               = 74  // { int mprotect(const void *addr, size_t len, \
	SYS_MADVISE                = 75  // { int madvise(void *addr, size_t len, \
	SYS_MINCORE                = 78  // { int mincore(const void *addr, size_t len, \
	SYS_GETGROUPS              = 79  // { int getgroups(u_int gidsetsize, \
	SYS_SETGROUPS              = 80  // { int setgroups(u_int gidsetsize, \
	SYS_GETPGRP                = 81  // { int getpgrp(void); }
	SYS_SETPGID                = 82  // { int setpgid(int pid, int pgid); }
	SYS_SETITIMER              = 83  // { int setitimer(u_int which, struct \
	SYS_SWAPON                 = 85  // { int swapon(char *name); }
	SYS_GETITIMER              = 86  // { int getitimer(u_int which, \
	SYS_GETDTABLESIZE          = 89  // { int getdtablesize(void); }
	SYS_DUP2                   = 90  // { int dup2(u_int from, u_int to); }
	SYS_FCNTL                  = 92  // { int fcntl(int fd, int cmd, long arg); }
	SYS_SELECT                 = 93  // { int select(int nd, fd_set *in, fd_set *ou, \
	SYS_FSYNC                  = 95  // { int fsync(int fd); }
	SYS_SETPRIORITY            = 96  // { int setpriority(int which, int who, \
	SYS_SOCKET                 = 97  // { int socket(int domain, int type, \
	SYS_CONNECT                = 98  // { int connect(int s, caddr_t name, \
	SYS_GETPRIORITY            = 100 // { int getpriority(int which, int who); }
	SYS_BIND                   = 104 // { int bind(int s, caddr_t name, \
	SYS_SETSOCKOPT             = 105 // { int setsockopt(int s, int level, int name, \
	SYS_LISTEN                 = 106 // { int listen(int s, int backlog); }
	SYS_GETTIMEOFDAY           = 116 // { int gettimeofday(struct timeval *tp, \
	SYS_GETRUSAGE              = 117 // { int getrusage(int who, \
	SYS_GETSOCKOPT             = 118 // { int getsockopt(int s, int level, int name, \
	SYS_READV                  = 120 // { int readv(int fd, struct iovec *iovp, \
	SYS_WRITEV                 = 121 // { int writev(int fd, struct iovec *iovp, \
	SYS_SETTIMEOFDAY           = 122 // { int settimeofday(struct timeval *tv, \
	SYS_FCHOWN                 = 123 // { int fchown(int fd, int uid, int gid); }
	SYS_FCHMOD                 = 124 // { int fchmod(int fd, int mode); }
	SYS_SETREUID               = 126 // { int setreuid(int ruid, int euid); }
	SYS_SETREGID               = 127 // { int setregid(int rgid, int egid); }
	SYS_RENAME                 = 128 // { int rename(char *from, char *to); }
	SYS_FLOCK                  = 131 // { int flock(int fd, int how); }
	SYS_MKFIFO                 = 132 // { int mkfifo(char *path, int mode); }
	SYS_SENDTO                 = 133 // { int sendto(int s, caddr_t buf, size_t len, \
	SYS_SHUTDOWN               = 134 // { int shutdown(int s, int how); }
	SYS_SOCKETPAIR             = 135 // { int socketpair(int domain, int type, \
	SYS_MKDIR                  = 136 // { int mkdir(char *path, int mode); }
	SYS_RMDIR                  = 137 // { int rmdir(char *path); }
	SYS_UTIMES                 = 138 // { int utimes(char *path, \
	SYS_ADJTIME                = 140 // { int adjtime(struct timeval *delta, \
	SYS_SETSID                 = 147 // { int setsid(void); }
	SYS_QUOTACTL               = 148 // { int quotactl(char *path, int cmd, int uid, \
	SYS_LGETFH                 = 160 // { int lgetfh(char *fname, \
	SYS_GETFH                  = 161 // { int getfh(char *fname, \
	SYS_SYSARCH                = 165 // { int sysarch(int op, char *parms); }
